import "util.scrypt";
import "tokenProto.scrypt";
import "txUtil.scrypt";
import "RabinUtil.scrypt";

/**
 * A token protocol based on UTXO model
 */
contract Token {

    public function unlockFromContract(
        SigHashPreimage txPreimage,
        bytes prevouts,
        bytes prevScriptTx,
        int prevScriptOutIndex,
        Ripemd160 receiver
    ) {
        // use Tx.checkPreimageOpt_
        //SigHashType sigHashType = SigHash.SINGLE | SigHash.FORKID;
        //require(Util.checkPreimageSigHashType(txPreimage, sigHashType));
        require(Tx.checkPreimageOpt_(txPreimage));

        // check prevouts
        require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

        // verify the prevScriptTx
        // the script input index is 0
        int outpointLen = 36;
        bytes prevScriptTxId = prevouts[:32];
        require(hash256(prevScriptTx) == prevScriptTxId);

        // check the script
        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);

        int dataStart = scriptLen - Util.PubKeyHashLen - 8;

        Ripemd160 scriptHash = Ripemd160(lockingScript[dataStart: dataStart + Util.PubKeyHashLen]);

        bytes prevScriptCode = TxUtil.readOutputScript(prevScriptTx, prevScriptOutIndex);

        require(hash160(prevScriptCode) == scriptHash);

        // do not check the output, use the oracle to verify contract output
    }

    // transfer token from n input to n output
    public function route(
        SigHashPreimage txPreimage,
        PubKey senderPubKey,
        Sig senderSig,
        int nSenders,
        bytes prevouts,
        int rabinPubKey,
        bytes rabinMsgArray,
        bytes paddingArray,
        bytes sigArray, // sig array
        int nReceivers,
        bytes receiverArray,
        bytes receiverTokenAmountArray,
        bytes outputSatoshiArray, // satoshi array 
        int changeSatoshis,
        Ripemd160 changeAddress
    ) {

        //require(Tx.checkPreimage(txPreimage));
        require(Tx.checkPreimageOpt(txPreimage));

        require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

        require(nSenders > 0);

        require(nReceivers > 0);

        bytes tokenScript = Util.scriptCode(txPreimage);
        int scriptLen = len(tokenScript);
        bytes senderAddress = TokenProto.getTokenAddress(tokenScript, scriptLen);
        // authorize
        require(hash160(senderPubKey) == senderAddress);
        require(checkSig(senderSig, senderPubKey));

        int i = 0;
        int sumInputToken = 0;
        int paddingPos = 0;
        // if nSenders == 1, donot need to verify rabin message
        if (nSenders > 1) {
            // max support loop num input token
            loop(3) {
                if (i < nSenders) {
                    // verify the rabin sig
                    bytes msg = rabinMsgArray[i * RabinUtil.RABIN_MSG_LEN: (i + 1) * RabinUtil.RABIN_MSG_LEN];
                    int paddingLen = Util.fromLEUnsigned(paddingArray[paddingPos: paddingPos + RabinUtil.PADDING_SIZE_LEN]);
                    bytes padding = b'';
                    if (paddingLen > 0) {
                        padding = paddingArray[paddingPos + RabinUtil.PADDING_SIZE_LEN: paddingPos + RabinUtil.PADDING_SIZE_LEN + paddingLen];
                    }
                    paddingPos = paddingPos + RabinUtil.PADDING_SIZE_LEN + paddingLen;
                    int h = Util.fromLEUnsigned(RabinUtil.rabinHash(msg + padding));
                    int sig = Util.fromLEUnsigned(sigArray[i * RabinUtil.RABIN_SIG_LEN: (i + 1) * RabinUtil.RABIN_SIG_LEN]);
                    require((sig * sig) % rabinPubKey == h % rabinPubKey);

                    // verify input tx
                    bytes inputTxId = prevouts[i * TxUtil.OUTPOINT_LEN: i * TxUtil.OUTPOINT_LEN + TxUtil.TX_ID_LEN];
                    int inputTxOutputIdx = Util.fromLEUnsigned(prevouts[i * TxUtil.OUTPOINT_LEN + TxUtil.TX_ID_LEN: (i + 1) * TxUtil.OUTPOINT_LEN]);

                    // get prev input Tx
                    require(inputTxId == RabinUtil.getMsgTxId(msg));
                    require(inputTxOutputIdx == RabinUtil.getMsgOutputIndex(msg));

                    int inputTokenAmount = RabinUtil.getMsgTokenAmount(msg);

                    sumInputToken = sumInputToken + inputTokenAmount;
                }
                i = i + 1;
            }
        } else {                
            sumInputToken = TokenProto.getTokenValue(tokenScript, scriptLen);
        }
        // check the outputs
        bytes outputs = b'';
        // max support loop num receiver, you can change this num, but will cause the contrac size increase. you can customize your output
        i = 0;
        int sumOutputToken = 0;
        loop(3) {
            if (i < nReceivers) {
                bytes address = receiverArray[i * TokenProto.TOKEN_ADDRESS_LEN: (i + 1) * TokenProto.TOKEN_ADDRESS_LEN];
                int tokenAmount = Util.fromLEUnsigned(receiverTokenAmountArray[i * TokenProto.TOKEN_VALUE_LEN: (i + 1) * TokenProto.TOKEN_VALUE_LEN]);
                sumOutputToken = sumOutputToken + tokenAmount;
                bytes outputScript = TokenProto.getNewTokenScript(tokenScript, scriptLen, address, tokenAmount);
                int outputSatoshi = Util.fromLEUnsigned(outputSatoshiArray[i * 8: (i + 1) * 8]);
                bytes output = Util.buildOutput(outputScript, outputSatoshi);
                outputs = outputs + output;
            }
            i = i + 1;
        }
        require(sumInputToken == sumOutputToken);
        if (changeSatoshis > 0) {
            bytes outputScript = Util.buildPublicKeyHashScript(changeAddress);
            bytes output = Util.buildOutput(outputScript, changeSatoshis);
            outputs = outputs + output;
        }
        bytes hashOutputs = hash256(outputs);
        require(hashOutputs == Util.hashOutputs(txPreimage));
    }

}