import "util.scrypt";
import "swapUtil.scrypt";
import "rabinUtil.scrypt";
import "txUtil.scrypt";
import "merkleTree.scrypt";

//opReturn + "lp address"
contract SwapAddLiquidity {
    bytes swapContractID;
    bytes fetchTokenContractHash;
    int[3] rabinPubKeyArray;
    bytes tokenID;
    int firstSaveBsvAmount;
    int firstSaveTokenAmount;

    /**
     * add liquidity from contract
     * @function unlock
    */
    public function unlock(
        SigHashPreimage txPreimage, 
        bytes prevouts,
        int tokenInputIndex,
        bytes tokenLockingScript, // token input locking script 
        bytes tokenRabinMsg,
        bytes[3] tokenPaddingArray,
        int[3] tokenSigArray,
        int swapInputIndex,
        bytes swapLockingScript, // swap input locking script
        bytes swapRabinMsg,
        bytes[3] swapPaddingArray,
        int[3] swapSigArray,
        int bsvAddAmount, 
        int senderLpAmount, 
        bool isNewLeaf,
        bytes lpMerklePath,
        bytes lastEntry,
        int changeSatoshis,
        Ripemd160 changeAddress
    ) {
        require(Tx.checkPreimage(txPreimage));

        // check prevouts
        require(hash256(prevouts) == Util.hashPrevouts(txPreimage));

        require(bsvAddAmount > 0);

        // get the sender lpAccount
        bytes lockingScript = Util.scriptCode(txPreimage);
        int scriptLen = len(lockingScript);
        bytes sender = lockingScript[scriptLen - 20: scriptLen];

        int swapInputSatoshis = RabinUtil.getMsgOutputSatoshis(swapRabinMsg);

        // use oralce to verify the swap contract input
        require(RabinUtil.checkOutputPoint(prevouts, swapInputIndex, swapRabinMsg));
        require(hash160(swapLockingScript) == RabinUtil.getMsgLockingScriptHash(swapRabinMsg));

        // verify the swap contract ID
        require(this.swapContractID == RabinUtil.getMsgUniqueID(swapRabinMsg));

        int swapVerifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, swapRabinMsg, swapPaddingArray, swapSigArray);
        require(swapVerifyCount >= 2);

        scriptLen = len(swapLockingScript);
        bytes lpMerkleRoot = SwapUtil.getLpMerkleRoot(swapLockingScript, scriptLen);
        int poolTokenAmount = SwapUtil.getTokenAmount(swapLockingScript, scriptLen);
        int totalLpAmount = SwapUtil.getLpAmount(swapLockingScript, scriptLen);

        // verify token input from oracle rabin msg
        require(RabinUtil.checkOutputPoint(prevouts, tokenInputIndex, tokenRabinMsg));
        require(hash160(tokenLockingScript) == RabinUtil.getMsgLockingScriptHash(tokenRabinMsg));
        require(this.tokenID == RabinUtil.getMsgTokenID(tokenRabinMsg));

        int tokenVerifyCount = RabinUtil.verifyMsgThree(this.rabinPubKeyArray, tokenRabinMsg, tokenPaddingArray, tokenSigArray);
        require(tokenVerifyCount >= 2);

        int tokenInputSatoshis = RabinUtil.getMsgOutputSatoshis(tokenRabinMsg);
        int tokenInputAmount = RabinUtil.getMsgTokenAmount(tokenRabinMsg);

        // check lp balance
        if (isNewLeaf) {
            require(senderLpAmount == 0);
        }

        int swapOutputSatoshis = swapInputSatoshis + bsvAddAmount;
        int lpMinted = 0;
        // mint the lp token 
        if (swapInputSatoshis > 0) {
            // check bsvAddAmount and tokenInputAmount at current ratio
            require(tokenInputAmount >= poolTokenAmount * bsvAddAmount / swapInputSatoshis);
            lpMinted = bsvAddAmount * totalLpAmount / swapInputSatoshis;
            if (lpMinted == 0) {
                lpMinted = 1;
            }
        }
        else {
            require(bsvAddAmount == this.firstSaveBsvAmount);
            require(tokenInputAmount == this.firstSaveTokenAmount);
            lpMinted = bsvAddAmount;
        }
        int newTotalLpAmount = totalLpAmount + lpMinted;
        int newSenderLpAmount = senderLpAmount + lpMinted;
        int newPoolTokenAmount = tokenInputAmount + poolTokenAmount;
        bytes newLpMerkleLeaf = sha256(sender + num2bin(newSenderLpAmount, 8));

        bytes newLpMerkleRoot = b'';
        // count the new lp merkle root
        if (isNewLeaf) {
            newLpMerkleRoot = MerkleTree.addLeafSafe(lastEntry, lpMerklePath, lpMerkleRoot, newLpMerkleLeaf);
        } else {
            bytes oldLeaf = sha256(sender + num2bin(senderLpAmount, 8));
            newLpMerkleRoot = MerkleTree.updateLeaf(oldLeaf, newLpMerkleLeaf, lpMerklePath, lpMerkleRoot);
        }

        // swap contract output
        bytes newSwapScript = SwapUtil.genNewSwapContract(swapLockingScript, newLpMerkleRoot, newPoolTokenAmount, newTotalLpAmount);
        bytes swapOutput = Util.buildOutput(newSwapScript, swapOutputSatoshis);

        // token output
        bytes newTokenScript = TokenProto.getNewTokenScript(tokenLockingScript, len(tokenLockingScript), this.fetchTokenContractHash, tokenInputAmount);
        bytes tokenOutput = Util.buildOutput(newTokenScript, tokenInputSatoshis);

        // bsv change output
        bytes changeOutput = b'';
        if (changeSatoshis > 0) {
            bytes outputScript = Util.buildPublicKeyHashScript(changeAddress);
            changeOutput = Util.buildOutput(outputScript, changeSatoshis);
        }

        bytes outputs = swapOutput + tokenOutput + changeOutput;
        require(hash256(outputs) == Util.hashOutputs(txPreimage));
    }
}